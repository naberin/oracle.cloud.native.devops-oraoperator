pipeline {
    agent any

    stages {
        stage('create-feature-branch') {
//             when {
// //                 allOf {
// //                     not { changeRequest target: "main" };
// //                     not { branch "main" };
// //                     equals expected: "1", actual: env.BUILD_NUMBER
// //                 }
//             }
            environment {
                DATABASENAME="${GIT_BRANCH.split("-")[0].toLowerCase()}"
            }

            steps {
                dir("examples/cloudbank/jenkins/backend-dev/scripts") {
                    echo "Generating database for branch $GIT_BRANCH"
                    sh "./generate-yaml-file.sh $DATABASENAME"
                }
                dir("$WORKSPACE/run") {
                    withKubeCredentials(kubectlCredentials: [[
                    caCertificate: '',
                    clusterName: "cluster-cwz7kgdbhgq",
                    contextName: '',
                    credentialsId: "kubectl-token",
                    namespace: "cloudbank",
                    serverUrl: "https://132.226.124.76:6443"
                    ]]) {
                        script {
                            echo "Creating Database $DATABASENAME."
                            sh "kubectl apply -f sidb-create.yaml"
                        }
                        timeout(5) {
                            waitUntil {
                                is_database_ready()
                            }
                        }
                        script {
                            sh "kubectl --type=merge -p '{\"spec\":{\"loadBalancer\": true}}' patch singleinstancedatabase $DATABASENAME"

                        }
                    }

                }
                create_database()
            }
        }
        stage('push-to-branch') {
        // Only triggered on pushed commits (BUILD_NUMBER > 1)
            when {
                not { changeRequest target: "main" };
                { branch "main" };
            }
            stages {
                stage("build-backend") {
                    steps {
                        echo "Commit found"
                        echo "Build# ${env.BUILD_NUMBER}"
                        setup_database()
                    }
                }

            }
        }
    }
}

def is_database_ready() {
    try {
        def r = sh script: "kubectl get singleinstancedatabase $DATABASENAME -o 'jsonpath={.status.status}'", returnStdout: true
        return (r == "Healthy")
    } catch (Exception e) {
        echo "Database is still being provisioned. Retrying..."
        return false
}

