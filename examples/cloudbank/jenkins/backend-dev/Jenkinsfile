pipeline {
    agent any
    environment {
        DATABASENAME="${GIT_BRANCH.split("-")[0]}"

    }
    stages {
        stage("details") {
        // Assumption: Branch names start with CBTRFDEVXXX-SUMMARY
        // CBTRFDEV is a CloudBank Transfer Microservice Development branch
        // CBTRFDEVXXX becomes the database name for development
            steps {
                echo "************************************************"
                echo "* ENVIRONMENT"
                echo "************************************************"
                sh "printenv"
                echo ""
                echo "************************************************"
                echo "* $DATABASENAME"
                echo "************************************************"
                sh "ls $WORKSPACE"
                echo "************************************************"
            }
        }
        stage('create-feature-branch') {
        // Only triggered on create-branch (BUILD_NUMBER == 1)
            when {
                equals expected: "1", actual: env.BUILD_NUMBER
            }
               stages {
                    stage("generate-yaml-file") {
                        steps {
                            echo "Generating YAML file to generate"
                            dir("$WORKSPACE/examples/cloudbank/jenkins/backend-dev/scripts") {
                                sh "generate-yaml-file.sh"
                            }
                        }
                    }
                    stage("create-database") {
                        steps {
                            echo "Creating Single-Instance Database $DATABASENAME"
                            create_database()
                        }
                    }
                    stage("setup-database") {
                        steps {
                            echo "Setting up SIDB $DATABASENAME"
                            setup_database()
                        }
               }
            }

        }
        stage('push-to-branch') {
        // Only triggered on pushed commits (BUILD_NUMBER > 1)
            stages {
                stage("build-backend") {
                    steps {
                        echo "Commit found"
                        echo "Build# ${env.BUILD_NUMBER}"
                    }
                }

            }


        }

        stage("merge-to-main") {
            when {
                changeRequest target: "main"
            }
            steps {
                echo "Pull Request $BRANCH_NAME"
            }
        }
    }
}

def setup_database() {
    timeout(5) {
        waitUntil {
            script {
                withKubeCredentials(
                    kubectlCredentials: [[
                        caCertificate: '',
                        clusterName: kube_cluster_name,
                        contextName: '',
                        credentialsId: '',
                        namespace: "cloudbank",
                        serverUrl: ""
                    ]]) {
                    def r = sh script: "kubectl get singleinstancedatabase $DATABASENAME -o 'jsonpath={.status.status}'", returnStdout: true
                    return (r == "Healthy")
                }
            }
        }
    }
    echo "setup_database"

}

def create_database() {
    dir("$WORKSPACE/run") {
        withKubeCredentials(kubectlCredentials: [[
        caCertificate: '',
        clusterName: kube_cluster_name,
        contextName: '',
        credentialsId: kube_cluster_credentials_id,
        namespace: "cloudbank",
        serverUrl: kube_cluster_server_url
        ]]) {
            sh "kubectl apply -f sidb-create.yaml"
            sh "kubectl --type=merge -p '{"spec":{"loadBalancer": true}}' patch singleinstancedatabase $DATABASENAME"
        }
    }
}