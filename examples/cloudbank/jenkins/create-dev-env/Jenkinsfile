pipeline {
    agent any
    environment {
        CLUSTERNAME="cluster-cwz7kgdbhgq"
        CLUSTERNAMESPACE="cloudbank"
        CLUSTERCLUSTERSERVERURL="https://132.226.124.76:6443"
        CLUSTERCREDENTIALSID=""
    }
    parameters {
        string(name: 'ref_value', defaultValue: '', description: 'Payload ref')
        string(name: 'x_github_event', defaultValue: '', description: 'Header X-Github-Event')
        string(name:  'ref_type', defaultValue: '', description: 'Payload ref_type')
    }
    triggers {
        GenericTrigger(
            genericVariables: [
                [key: 'ref_value', value: '$.ref'],
                [key: 'ref_type', value: '$.ref_type'],
            ],
            genericHeaderVariables: [
                [key: 'X-Github-Event', regexpFilter: '']

            ],
            causeString: 'Triggered by feature branch creation',
            token: '',
            tokenCredentialId: 'create-trigger-secret',

            printContributedVariables: false,
            printPostContent: false,
            silentResponse: false,
            regexpFilterText: '$ref_value',
            regexpFilterExpression: '^dev/'
        )
    }
    stages {
        stage('create-feature-branch') {
            when {
                expression { return params.ref_type == "branch" && params.x_github_event == "create" }
            }
            steps {
                script {
                    try {
                        DATABASENAME="${params.ref_value.split("/")[1].toLowerCase()}"
                    } catch (Exception e) {
                        DATABASENAME=""
                    }
                }
                dir("examples/cloudbank/jenkins/backend-dev/scripts") {
                    echo "Generating database for branch $GIT_BRANCH"
                    sh "./generate-yaml-file.sh $DATABASENAME"
                }
                dir("$WORKSPACE/run") {
                    withKubeCredentials(kubectlCredentials: [[
                    caCertificate: '',
                    clusterName: env.CLUSTERNAME,
                    contextName: '',
                    credentialsId: "kubectl-token",
                    namespace: env.CLUSTERNAMESPACE,
                    serverUrl: env.CLUSTERSERVERURL
                    ]]) {
                        script {
                            echo "Creating Database $DATABASENAME."
                            sh "kubectl apply -f sidb-create.yaml"
                        }
                        timeout(5) {
                            waitUntil {
                                is_database_ready()
                            }
                        }
                        script {
                            sh "kubectl --type=merge -p '{\"spec\":{\"loadBalancer\": true}}' patch singleinstancedatabase $DATABASENAME"
                        }
                    }

                }
            }
        }

    }
}
def is_database_ready(database) {
    try {
        def r = sh script: "kubectl get singleinstancedatabase $database -o 'jsonpath={.status.status}'", returnStdout: true
        return (r == "Healthy")
    } catch (Exception e) {
        echo "Database is still being provisioned. Retrying..."
        return false
}